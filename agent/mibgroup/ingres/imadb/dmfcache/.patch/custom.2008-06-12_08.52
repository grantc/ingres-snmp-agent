--- dmfTable_data_access.c	2008-04-11 15:38:34.000000000 +0100
+++ /usr/local/src/net-snmp-5.4.1/agent/mibgroup/ingres/imadb/dmfcache//dmfTable_data_access.c	2008-04-11 16:13:50.000000000 +0100
@@ -1,5 +1,6 @@
+# include "/opt/Ingres/IngresII/ingres/files/eqdef.h"
 /*
  * Note: this file originally auto-generated by mib2c using
  *       version : 14170 $ of $ 
  *
  * $Id:$
@@ -8,19 +9,20 @@
  * standard Net-SNMP includes 
  */
 #include <net-snmp/net-snmp-config.h>
 #include <net-snmp/net-snmp-includes.h>
 #include <net-snmp/agent/net-snmp-agent-includes.h>
-
 /*
  * include our parent header 
  */
 #include "dmfTable.h"
-
-
 #include "dmfTable_data_access.h"
-
+# include "/opt/Ingres/IngresII/ingres/files/eqsqlca.h"
+    extern IISQLCA sqlca;   /* SQL Communications Area */
+close_down(){
+exit(-1);
+}
 /** @ingroup interface
  * @addtogroup data_access data_access: Routines to access data
  *
  * These routines are used to locate the data used to satisfy
  * requests.
@@ -37,11 +39,10 @@
 /*
  * INGRES-MIB::dmfTable is subid 1 of imadb.
  * Its status is Current.
  * OID: .1.3.6.1.4.1.757.5.1.1, length: 10
  */
-
 /**
  * initialization for dmfTable data access
  *
  * This function is called during startup to allow you to
  * allocate any resources you need for the data table.
@@ -54,11 +55,10 @@
  */
 int
 dmfTable_init_data(dmfTable_registration * dmfTable_reg)
 {
     DEBUGMSGTL(("verbose:dmfTable:dmfTable_init_data", "called\n"));
-
     /*
      * TODO:303:o: Initialize dmfTable data.
      */
     /*
      ***************************************************
@@ -73,19 +73,16 @@ dmfTable_init_data(dmfTable_registration
      */
     /*
      ***---------------------------------------------***
      ***              END  EXAMPLE CODE              ***
      ***************************************************/
-
     return MFD_SUCCESS;
 }                               /* dmfTable_init_data */
-
 /**
  * container overview
  *
  */
-
 /**
  * container initialization
  *
  * @param container_ptr_ptr A pointer to a container pointer. If you
  *        create a custom container, use this parameter to return it
@@ -113,39 +110,34 @@ dmfTable_init_data(dmfTable_registration
 void
 dmfTable_container_init(netsnmp_container ** container_ptr_ptr,
                         netsnmp_cache * cache)
 {
     DEBUGMSGTL(("verbose:dmfTable:dmfTable_container_init", "called\n"));
-
     if (NULL == container_ptr_ptr) {
         snmp_log(LOG_ERR,
                  "bad container param to dmfTable_container_init\n");
         return;
     }
-
     /*
      * For advanced users, you can use a custom container. If you
      * do not create one, one will be created for you.
      */
     *container_ptr_ptr = NULL;
-
     if (NULL == cache) {
         snmp_log(LOG_ERR, "bad cache param to dmfTable_container_init\n");
         return;
     }
-
     /*
      * TODO:345:A: Set up dmfTable cache properties.
      *
      * Also for advanced users, you can set parameters for the
      * cache. Do not change the magic pointer, as it is used
      * by the MFD helper. To completely disable caching, set
      * cache->enabled to 0.
      */
     cache->timeout = DMFTABLE_CACHE_TIMEOUT;    /* seconds */
 }                               /* dmfTable_container_init */
-
 /**
  * container shutdown
  *
  * @param container_ptr A pointer to the container.
  *
@@ -163,18 +155,15 @@ dmfTable_container_init(netsnmp_containe
 void
 dmfTable_container_shutdown(netsnmp_container * container_ptr)
 {
     DEBUGMSGTL(("verbose:dmfTable:dmfTable_container_shutdown",
                 "called\n"));
-
     if (NULL == container_ptr) {
         snmp_log(LOG_ERR, "bad params to dmfTable_container_shutdown\n");
         return;
     }
-
 }                               /* dmfTable_container_shutdown */
-
 /**
  * load initial data
  *
  * TODO:350:M: Implement dmfTable data load
  * This function will also be called by the cache helper to load
@@ -209,109 +198,155 @@ dmfTable_container_shutdown(netsnmp_cont
 int
 dmfTable_container_load(netsnmp_container * container)
 {
     dmfTable_rowreq_ctx *rowreq_ctx;
     size_t          count = 0;
-
     /*
      * temporary storage for index values
      */
     /*
-     * server(1)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
+     * server(1)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
      */
         /** 128 - 1(entry) - 1(col) - 1(other indexes) = 113 */
     char            server[113];
     size_t          server_len;
     /*
      * pagesize(2)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
      */
     long            pagesize;
-
-
-    /*
-     * this example code is based on a data source that is a
-     * text file to be read and parsed.
-     */
-    FILE           *filep;
-    char            line[MAX_LINE_SIZE];
-
+# include "dmfcache.c"
+/* # line 245 "dmfTable_data_access.sc" */	/* host code */
     DEBUGMSGTL(("verbose:dmfTable:dmfTable_container_load", "called\n"));
-
-    /*
-     ***************************************************
-     ***             START EXAMPLE CODE              ***
-     ***---------------------------------------------***/
     /*
-     * open our data file.
+     * open data connection.
      */
-    filep = fopen("/etc/dummy.conf", "r");
-    if (NULL == filep) {
-        return MFD_RESOURCE_UNAVAILABLE;
+/* # line 252 "dmfTable_data_access.sc" */	/* connect */
+  {
+    IIsqInit(&sqlca);
+    IIsqConnect(0,(char *)"imadb",(char *)0, (char *)0, (char *)0, (char *)0, 
+    (char *)0, (char *)0, (char *)0, (char *)0, (char *)0, (char *)0, 
+    (char *)0, (char *)0, (char *)0);
+    if (sqlca.sqlcode < 0) 
+      IIsqStop(&sqlca);
     }
-
-    /*
-     ***---------------------------------------------***
-     ***              END  EXAMPLE CODE              ***
-     ***************************************************/
+/* # line 254 "dmfTable_data_access.sc" */	/* host code */
+        DEBUGMSGTL(("verbose:dmfTable","Connected to database\n"));
     /*
      * TODO:351:M: |-> Load/update data in the dmfTable container.
      * loop over your dmfTable data, allocate a rowreq context,
      * set the index(es) [and data, optionally] and insert into
      * the container.
      */
+/* # line 263 "dmfTable_data_access.sc" */	/* open */
+  {
+    IIsqInit(&sqlca);
+    IIcsOpen((char *)"dmfcsr",48,25779);
+    IIwritio(0,(short *)0,1,32,0,(char *)
+"select * from ima_dmf_cache_stats");
+    IIwritio(0,(short *)0,1,32,0,(char *)" for readonly ");
+    IIcsQuery((char *)"dmfcsr",48,25779);
+    if (sqlca.sqlcode < 0) 
+      IIsqStop(&sqlca);
+  }
+/* # line 264 "dmfTable_data_access.sc" */	/* host code */
+        DEBUGMSGTL(("verbose:dmfTable","Cursor opened\n"));
     while (1) {
-        /*
-         ***************************************************
-         ***             START EXAMPLE CODE              ***
-         ***---------------------------------------------***/
-        /*
-         * get a line (skip blank lines)
-         */
-        do {
-            if (!fgets(line, sizeof(line), filep)) {
-                /*
-                 * we're done 
-                 */
-                fclose(filep);
-                filep = NULL;
+/* # line 271 "dmfTable_data_access.sc" */	/* fetch */
+  {
+    IIsqInit(&sqlca);
+    if (IIcsRetScroll((char *)"dmfcsr",48,25779,0,0) != 0) {
+      IIcsGetio((short *)0,1,32,64,(dmfrec).server);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).pagesize),&(dmfrec).pagesize);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).forceCount),&
+      (dmfrec).forceCount);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).ioWaitCount),&
+      (dmfrec).ioWaitCount);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).groupBufferReadCount),&
+      (dmfrec).groupBufferReadCount);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).groupBufferWriteCount),&
+      (dmfrec).groupBufferWriteCount);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).fixCount),&(dmfrec).fixCount);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).unfixCount),&
+      (dmfrec).unfixCount);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).readCount),&(dmfrec).readCount);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).writeCount),&
+      (dmfrec).writeCount);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).hitCount),&(dmfrec).hitCount);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).dirtyUnfixCount),&
+      (dmfrec).dirtyUnfixCount);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).pagesStillValid),&
+      (dmfrec).pagesStillValid);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).pagesInvalid),&
+      (dmfrec).pagesInvalid);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).bufferCount),&
+      (dmfrec).bufferCount);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).pageBufferCount),&
+      (dmfrec).pageBufferCount);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).fLimit),&(dmfrec).fLimit);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).mLimit),&(dmfrec).mLimit);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).wbStart),&(dmfrec).wbStart);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).wbEnd),&(dmfrec).wbEnd);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).hashBucketCount),&
+      (dmfrec).hashBucketCount);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).groupBufferCount),&
+      (dmfrec).groupBufferCount);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).groupBufferSize),&
+      (dmfrec).groupBufferSize);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).cacheStatus),&
+      (dmfrec).cacheStatus);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).freeBufferCount),&
+      (dmfrec).freeBufferCount);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).freeBufferWaiters),&
+      (dmfrec).freeBufferWaiters);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).fixedBufferCount),&
+      (dmfrec).fixedBufferCount);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).modifiedBufferCount),&
+      (dmfrec).modifiedBufferCount);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).freeGroupBufferCount),&
+      (dmfrec).freeGroupBufferCount);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).fixedGroupBufferCount),&
+      (dmfrec).fixedGroupBufferCount);
+      IIcsGetio((short *)0,1,30,sizeof((dmfrec).modifiedGroupBufferCount),&
+      (dmfrec).modifiedGroupBufferCount);
+      IIcsERetrieve();
+    } /* IIcsRetrieve */
+    if (sqlca.sqlcode == 100) 
+      goto close_dmfcsr;
+    else if (sqlca.sqlcode < 0) 
+      IIsqStop(&sqlca);
             }
-        } while (filep && (line[0] == '\n'));
-
-        /*
-         * check for end of data
-         */
-        if (NULL == filep)
-            break;
-
+/* # line 272 "dmfTable_data_access.sc" */	/* host code */
+		DEBUGMSGTL(("verbose:dmfTable","SQL fetched\n"));
+        	DEBUGMSGTL(("verbose:dmfTable","Server %s\n",dmfrec.server));
+        	DEBUGMSGTL(("verbose:dmfTable","Page Size %d\n",dmfrec.pagesize));
+        	DEBUGMSGTL(("verbose:dmfTable","Fix Count %d\n",dmfrec.fixCount));
         /*
-         * parse line into variables
+         * parse strings into variables
          */
-        /*
-         ***---------------------------------------------***
-         ***              END  EXAMPLE CODE              ***
-         ***************************************************/
-
+        strcpy(server,dmfrec.server);
+        server_len = strlen(server);
         /*
          * TODO:352:M: |   |-> set indexes in new dmfTable rowreq context.
          * data context will be set from the param (unless NULL,
          *      in which case a new data context will be allocated)
          */
         rowreq_ctx = dmfTable_allocate_rowreq_ctx(NULL);
         if (NULL == rowreq_ctx) {
             snmp_log(LOG_ERR, "memory allocation failed\n");
             return MFD_RESOURCE_UNAVAILABLE;
         }
+	DEBUGMSGTL(("verbose:dmfTable","Setting index %s %d %d\n", dmfrec.server, server_len, dmfrec.pagesize));
         if (MFD_SUCCESS !=
-            dmfTable_indexes_set(rowreq_ctx, server, server_len,
-                                 pagesize)) {
+            dmfTable_indexes_set(rowreq_ctx, dmfrec.server, strlen(dmfrec.server),
+                                 dmfrec.pagesize)) {
             snmp_log(LOG_ERR,
                      "error setting index while loading "
                      "dmfTable data.\n");
             dmfTable_release_rowreq_ctx(rowreq_ctx);
             continue;
         }
-
+	DEBUGMSGTL(("verbose:dmfTable","Index set\n"));
         /*
          * TODO:352:r: |   |-> populate dmfTable data context.
          * Populate data context here. (optionally, delay until row prep)
          */
         /*
@@ -321,234 +356,199 @@ dmfTable_container_load(netsnmp_containe
         /*
          * setup/save data for forceCount
          * forceCount(3)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.forceCount = forceCount;
-
+        rowreq_ctx->data.forceCount = dmfrec.forceCount;
         /*
          * setup/save data for ioWaitCount
          * ioWaitCount(4)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.ioWaitCount = ioWaitCount;
-
+        rowreq_ctx->data.ioWaitCount = dmfrec.ioWaitCount;
         /*
          * setup/save data for groupBufferReadCount
          * groupBufferReadCount(5)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.groupBufferReadCount = groupBufferReadCount;
-
+        rowreq_ctx->data.groupBufferReadCount = dmfrec.groupBufferReadCount;
         /*
          * setup/save data for groupBufferWriteCount
          * groupBufferWriteCount(6)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.groupBufferWriteCount = groupBufferWriteCount;
-
+        rowreq_ctx->data.groupBufferWriteCount = dmfrec.groupBufferWriteCount;
         /*
          * setup/save data for fixCount
          * fixCount(7)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.fixCount = fixCount;
-
+        rowreq_ctx->data.fixCount = dmfrec.fixCount;
         /*
          * setup/save data for unfixCount
          * unfixCount(8)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.unfixCount = unfixCount;
-
+        rowreq_ctx->data.unfixCount = dmfrec.unfixCount;
         /*
          * setup/save data for readCount
          * readCount(9)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.readCount = readCount;
-
+        rowreq_ctx->data.readCount = dmfrec.readCount;
         /*
          * setup/save data for writeCount
          * writeCount(10)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.writeCount = writeCount;
-
+        rowreq_ctx->data.writeCount = dmfrec.writeCount;
         /*
          * setup/save data for hitCount
          * hitCount(11)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.hitCount = hitCount;
-
+        rowreq_ctx->data.hitCount = dmfrec.hitCount;
         /*
          * setup/save data for dirtyUnfixCount
          * dirtyUnfixCount(12)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.dirtyUnfixCount = dirtyUnfixCount;
-
+        rowreq_ctx->data.dirtyUnfixCount = dmfrec.dirtyUnfixCount;
         /*
          * setup/save data for pagesStillValid
          * pagesStillValid(13)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.pagesStillValid = pagesStillValid;
-
+        rowreq_ctx->data.pagesStillValid = dmfrec.pagesStillValid;
         /*
          * setup/save data for pagesInvalid
          * pagesInvalid(14)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.pagesInvalid = pagesInvalid;
-
+        rowreq_ctx->data.pagesInvalid = dmfrec.pagesInvalid;
         /*
          * setup/save data for bufferCount
          * bufferCount(15)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.bufferCount = bufferCount;
-
+        rowreq_ctx->data.bufferCount = dmfrec.bufferCount;
         /*
          * setup/save data for pageBufferCount
          * pageBufferCount(16)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.pageBufferCount = pageBufferCount;
-
+        rowreq_ctx->data.pageBufferCount = dmfrec.pageBufferCount;
         /*
          * setup/save data for fLimit
          * fLimit(17)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.fLimit = fLimit;
-
+        rowreq_ctx->data.fLimit = dmfrec.fLimit;
         /*
          * setup/save data for mLimit
          * mLimit(18)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.mLimit = mLimit;
-
+        rowreq_ctx->data.mLimit = dmfrec.mLimit;
         /*
          * setup/save data for wbStart
          * wbStart(19)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.wbStart = wbStart;
-
+        rowreq_ctx->data.wbStart = dmfrec.wbStart;
         /*
          * setup/save data for wbEnd
          * wbEnd(20)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.wbEnd = wbEnd;
-
+        rowreq_ctx->data.wbEnd = dmfrec.wbEnd;
         /*
          * setup/save data for hashBucketCount
          * hashBucketCount(21)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.hashBucketCount = hashBucketCount;
-
+        rowreq_ctx->data.hashBucketCount = dmfrec.hashBucketCount;
         /*
          * setup/save data for groupBufferCount
          * groupBufferCount(22)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.groupBufferCount = groupBufferCount;
-
+        rowreq_ctx->data.groupBufferCount = dmfrec.groupBufferCount;
         /*
          * setup/save data for groupBufferSize
          * groupBufferSize(23)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.groupBufferSize = groupBufferSize;
-
+        rowreq_ctx->data.groupBufferSize = dmfrec.groupBufferSize;
         /*
          * setup/save data for cacheStatus
          * cacheStatus(24)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.cacheStatus = cacheStatus;
-
+        rowreq_ctx->data.cacheStatus = dmfrec.cacheStatus;
         /*
          * setup/save data for freeBufferCount
          * freeBufferCount(25)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.freeBufferCount = freeBufferCount;
-
+        rowreq_ctx->data.freeBufferCount = dmfrec.freeBufferCount;
         /*
          * setup/save data for freeBufferWaiters
          * freeBufferWaiters(26)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.freeBufferWaiters = freeBufferWaiters;
-
+        rowreq_ctx->data.freeBufferWaiters = dmfrec.freeBufferWaiters;
         /*
          * setup/save data for fixedBufferCount
          * fixedBufferCount(27)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.fixedBufferCount = fixedBufferCount;
-
+        rowreq_ctx->data.fixedBufferCount = dmfrec.fixedBufferCount;
         /*
          * setup/save data for modifiedBufferCount
          * modifiedBufferCount(28)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.modifiedBufferCount = modifiedBufferCount;
-
+        rowreq_ctx->data.modifiedBufferCount = dmfrec.modifiedBufferCount;
         /*
          * setup/save data for freeGroupBufferCount
          * freeGroupBufferCount(29)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.freeGroupBufferCount = freeGroupBufferCount;
-
+        rowreq_ctx->data.freeGroupBufferCount = dmfrec.freeGroupBufferCount;
         /*
          * setup/save data for fixedGroupBufferCount
          * fixedGroupBufferCount(30)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
-        rowreq_ctx->data.fixedGroupBufferCount = fixedGroupBufferCount;
-
+        rowreq_ctx->data.fixedGroupBufferCount = dmfrec.fixedGroupBufferCount;
         /*
          * setup/save data for modifiedGroupBufferCount
          * modifiedGroupBufferCount(31)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
          */
     /** no mapping */
         rowreq_ctx->data.modifiedGroupBufferCount =
-            modifiedGroupBufferCount;
-
-
+            dmfrec.modifiedGroupBufferCount;
         /*
          * insert into table container
          */
         CONTAINER_INSERT(container, rowreq_ctx);
         ++count;
     }
-
-    /*
-     ***************************************************
-     ***             START EXAMPLE CODE              ***
-     ***---------------------------------------------***/
-    if (NULL != filep)
-        fclose(filep);
-    /*
-     ***---------------------------------------------***
-     ***              END  EXAMPLE CODE              ***
-     ***************************************************/
-
+        close_dmfcsr:
+/* # line 530 "dmfTable_data_access.sc" */	/* close */
+  {
+    IIsqInit(&sqlca);
+    IIcsClose((char *)"dmfcsr",48,25779);
+    if (sqlca.sqlcode < 0) 
+      IIsqStop(&sqlca);
+  }
+/* # line 533 "dmfTable_data_access.sc" */	/* host code */
     DEBUGMSGT(("verbose:dmfTable:dmfTable_container_load",
                "inserted %d records\n", count));
-
     return MFD_SUCCESS;
 }                               /* dmfTable_container_load */
-
 /**
  * container clean up
  *
  * @param container container with all current items
  *
@@ -562,16 +562,14 @@ dmfTable_container_load(netsnmp_containe
  */
 void
 dmfTable_container_free(netsnmp_container * container)
 {
     DEBUGMSGTL(("verbose:dmfTable:dmfTable_container_free", "called\n"));
-
     /*
      * TODO:380:M: Free dmfTable container data.
      */
 }                               /* dmfTable_container_free */
-
 /**
  * prepare row for processing.
  *
  *  When the agent has located the row for a request, this function is
  *  called to prepare the row for processing. If you fully populated
@@ -585,18 +583,14 @@ dmfTable_container_free(netsnmp_containe
  */
 int
 dmfTable_row_prep(dmfTable_rowreq_ctx * rowreq_ctx)
 {
     DEBUGMSGTL(("verbose:dmfTable:dmfTable_row_prep", "called\n"));
-
     netsnmp_assert(NULL != rowreq_ctx);
-
     /*
      * TODO:390:o: Prepare row for request.
      * If populating row data was delayed, this is the place to
      * fill in the row for this request.
      */
-
     return MFD_SUCCESS;
 }                               /* dmfTable_row_prep */
-
 /** @} */
--- dmfTable.h	2008-04-11 15:38:34.000000000 +0100
+++ /usr/local/src/net-snmp-5.4.1/agent/mibgroup/ingres/imadb/dmfcache//dmfTable.h	2008-04-12 05:16:43.000000000 +0100
@@ -21,14 +21,14 @@ extern          "C" {
     /*
      * other required module components 
      */
     /* *INDENT-OFF*  */
 config_add_mib(INGRES-MIB)
-config_require(INGRES-MIB/dmfTable/dmfTable_interface)
-config_require(INGRES-MIB/dmfTable/dmfTable_data_access)
-config_require(INGRES-MIB/dmfTable/dmfTable_data_get)
-config_require(INGRES-MIB/dmfTable/dmfTable_data_set)
+config_require(ingres/imadb/dmfcache/dmfTable_interface)
+config_require(ingres/imadb/dmfcache/dmfTable_data_access)
+config_require(ingres/imadb/dmfcache/dmfTable_data_get)
+config_require(ingres/imadb/dmfcache/dmfTable_data_set)
     /* *INDENT-ON*  */
 
     /*
      * OID and column number definitions for dmfTable 
      */
