/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 14170 $ of $
 *
 * $Id:$
 */
#ifndef DMFTABLE_H
#define DMFTABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

    /*
     * other required module components 
     */
    /* *INDENT-OFF*  */
config_add_mib(INGRES-MIB)
config_require(ingres/imadb/dmfcache/dmfTable_interface)
config_require(ingres/imadb/dmfcache/dmfTable_data_access)
config_require(ingres/imadb/dmfcache/dmfTable_data_get)
config_require(ingres/imadb/dmfcache/dmfTable_data_set)
    /* *INDENT-ON*  */

    /*
     * OID and column number definitions for dmfTable 
     */
#include "dmfTable_oids.h"

    /*
     * enum definions 
     */
#include "dmfTable_enums.h"

    /*
     *********************************************************************
     * function declarations
     */
    void            init_dmfTable(void);
    void            shutdown_dmfTable(void);

    /*
     *********************************************************************
     * Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table dmfTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * INGRES-MIB::dmfTable is subid 1 of imadb.
     * Its status is Current.
     * OID: .1.3.6.1.4.1.757.5.1.1, length: 10
     */
    /*
     *********************************************************************
     * When you register your mib, you get to provide a generic
     * pointer that will be passed back to you for most of the
     * functions calls.
     *
     * TODO:100:r: Review all context structures
     */
    /*
     * TODO:101:o: |-> Review dmfTable registration context.
     */
    typedef netsnmp_data_list dmfTable_registration;

/**********************************************************************/
    /*
     * TODO:110:r: |-> Review dmfTable data context structure.
     * This structure is used to represent the data for dmfTable.
     */
    /*
     * This structure contains storage for all the columns defined in the
     * dmfTable.
     */
    typedef struct dmfTable_data_s {

        /*
         * forceCount(3)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            forceCount;

        /*
         * ioWaitCount(4)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            ioWaitCount;

        /*
         * groupBufferReadCount(5)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            groupBufferReadCount;

        /*
         * groupBufferWriteCount(6)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            groupBufferWriteCount;

        /*
         * fixCount(7)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            fixCount;

        /*
         * unfixCount(8)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            unfixCount;

        /*
         * readCount(9)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            readCount;

        /*
         * writeCount(10)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            writeCount;

        /*
         * hitCount(11)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            hitCount;

        /*
         * dirtyUnfixCount(12)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            dirtyUnfixCount;

        /*
         * pagesStillValid(13)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            pagesStillValid;

        /*
         * pagesInvalid(14)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            pagesInvalid;

        /*
         * bufferCount(15)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            bufferCount;

        /*
         * pageBufferCount(16)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            pageBufferCount;

        /*
         * fLimit(17)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            fLimit;

        /*
         * mLimit(18)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            mLimit;

        /*
         * wbStart(19)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            wbStart;

        /*
         * wbEnd(20)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            wbEnd;

        /*
         * hashBucketCount(21)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            hashBucketCount;

        /*
         * groupBufferCount(22)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            groupBufferCount;

        /*
         * groupBufferSize(23)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            groupBufferSize;

        /*
         * cacheStatus(24)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            cacheStatus;

        /*
         * freeBufferCount(25)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            freeBufferCount;

        /*
         * freeBufferWaiters(26)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            freeBufferWaiters;

        /*
         * fixedBufferCount(27)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            fixedBufferCount;

        /*
         * modifiedBufferCount(28)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            modifiedBufferCount;

        /*
         * freeGroupBufferCount(29)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            freeGroupBufferCount;

        /*
         * fixedGroupBufferCount(30)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            fixedGroupBufferCount;

        /*
         * modifiedGroupBufferCount(31)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            modifiedGroupBufferCount;

    } dmfTable_data;


    /*
     * TODO:120:r: |-> Review dmfTable mib index.
     * This structure is used to represent the index for dmfTable.
     */
    typedef struct dmfTable_mib_index_s {

        /*
         * server(1)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
        /** 128 - 1(other indexes) - oid length(12) = 114 */
        char            server[114];
        size_t          server_len;

        /*
         * pagesize(2)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            pagesize;


    } dmfTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review dmfTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     *
     * BE VERY CAREFUL TO TAKE INTO ACCOUNT THE MAXIMUM
     * POSSIBLE LENGHT FOR EVERY VARIABLE LENGTH INDEX!
     * Guessing 128 - col/entry(2)  - oid len(10)
     */
#define MAX_dmfTable_IDX_LEN     116


    /*
     *********************************************************************
     * TODO:130:o: |-> Review dmfTable Row request (rowreq) context.
     * When your functions are called, you will be passed a
     * dmfTable_rowreq_ctx pointer.
     */
    typedef struct dmfTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
        netsnmp_index   oid_idx;
        oid             oid_tmp[MAX_dmfTable_IDX_LEN];

        dmfTable_mib_index tbl_idx;

        dmfTable_data   data;

        /*
         * flags per row. Currently, the first (lower) 8 bits are reserved
         * for the user. See mfd.h for other flags.
         */
        u_int           rowreq_flags;

        /*
         * TODO:131:o: |   |-> Add useful data to dmfTable rowreq context.
         */

        /*
         * storage for future expansion
         */
        netsnmp_data_list *dmfTable_data_list;

    } dmfTable_rowreq_ctx;

    typedef struct dmfTable_ref_rowreq_ctx_s {
        dmfTable_rowreq_ctx *rowreq_ctx;
    } dmfTable_ref_rowreq_ctx;

    /*
     *********************************************************************
     * function prototypes
     */
    int             dmfTable_pre_request(dmfTable_registration *
                                         user_context);
    int             dmfTable_post_request(dmfTable_registration *
                                          user_context, int rc);

    int             dmfTable_rowreq_ctx_init(dmfTable_rowreq_ctx *
                                             rowreq_ctx,
                                             void *user_init_ctx);
    void            dmfTable_rowreq_ctx_cleanup(dmfTable_rowreq_ctx *
                                                rowreq_ctx);


    dmfTable_rowreq_ctx *dmfTable_row_find_by_mib_index(dmfTable_mib_index
                                                        * mib_idx);

    extern oid      dmfTable_oid[];
    extern int      dmfTable_oid_size;


#include "dmfTable_interface.h"
#include "dmfTable_data_access.h"
#include "dmfTable_data_get.h"
#include "dmfTable_data_set.h"

    /*
     * DUMMY markers, ignore
     *
     * TODO:099:x: *************************************************************
     * TODO:199:x: *************************************************************
     * TODO:299:x: *************************************************************
     * TODO:399:x: *************************************************************
     * TODO:499:x: *************************************************************
     */

#ifdef __cplusplus
}
#endif
#endif                          /* DMFTABLE_H */
/** @} */
